name: Build MOSIP ID Authentication (No ECR)

on:
  push:
    branches:
      - main
      - master
      - develop
    paths:
      - "authentication/**"
      - ".github/workflows/build-only.yml"
  pull_request:
    branches:
      - main
      - master
      - develop
    paths:
      - "authentication/**"
      - ".github/workflows/build-only.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to build for"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod
      version:
        description: "Version tag for the build"
        required: false
        default: ""
        type: string

env:
  JAVA_VERSION: "11"
  MAVEN_VERSION: "3.8.7"

jobs:
  build-maven:
    name: Build Maven Artifacts
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-artifacts: ${{ steps.build.outputs.artifacts }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Determine version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Extract version from pom.xml or use git tag
            VERSION=$(grep -oP '<version>\K[^<]+' authentication/pom.xml | head -1)
            if [ -z "$VERSION" ]; then
              VERSION="1.0.0-$(date +%Y%m%d%H%M%S)-$(git rev-parse --short HEAD)"
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Build Maven project
        id: build
        run: |
          cd authentication
          # Use the exact command that worked locally
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true -Dgpg.skip=true

          # Create artifacts directory
          mkdir -p ../build-artifacts

          # Copy JAR files
          find . -name "*.jar" -path "*/target/*" -not -name "*-sources.jar" -exec cp {} ../build-artifacts/ \;

          # List artifacts for verification
          echo "Built artifacts:"
          ls -la ../build-artifacts/

          echo "artifacts=../build-artifacts" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: maven-artifacts-${{ steps.version.outputs.version }}
          path: build-artifacts/
          retention-days: 7

  build-docker-local:
    name: Build Docker Images (Local Only)
    runs-on: ubuntu-latest
    needs: build-maven
    strategy:
      matrix:
        service:
          - name: authentication-service
            port: 8090
            path: authentication/authentication-service
          - name: authentication-internal-service
            port: 8093
            path: authentication/authentication-internal-service
          - name: authentication-otp-service
            port: 8092
            path: authentication/authentication-otp-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: maven-artifacts-${{ needs.build-maven.outputs.version }}
          path: build-artifacts/

      - name: Copy JAR file to service directory
        run: |
          # Create target directory if it doesn't exist
          mkdir -p ${{ matrix.service.path }}/target/
          
          # Copy the specific JAR file for this service
          cp build-artifacts/${{ matrix.service.name }}-*.jar ${{ matrix.service.path }}/target/
          ls -la ${{ matrix.service.path }}/target/

      - name: Build Docker image
        run: |
          cd ${{ matrix.service.path }}
          docker build \
            --build-arg spring_config_label=${{ needs.build-maven.outputs.version }} \
            --build-arg active_profile=${{ github.event.inputs.environment || 'dev' }} \
            --build-arg spring_config_url=http://config-server:8888 \
            --build-arg artifactory_url=http://artifactory:8081 \
            --build-arg biosdk_zip_path=artifactory/libs-release-local/biosdk/mock/0.9/biosdk.zip \
            --build-arg demosdk_zip_path=artifactory/libs-release-local/demosdk/mock/0.9/demosdk.zip \
            --build-arg hsm_client_zip_path=artifactory/libs-release-local/hsm/client.zip \
            --build-arg iam_adapter_url=http://artifactory:8081/kernel-auth-adapter.jar \
            --build-arg is_glowroot=absent \
            -t mosip-${{ matrix.service.name }}:${{ needs.build-maven.outputs.version }} \
            -t mosip-${{ matrix.service.name }}:latest \
            .

      - name: Test Docker image
        run: |
          echo "Testing Docker image: mosip-${{ matrix.service.name }}:${{ needs.build-maven.outputs.version }}"
          docker images | grep mosip-${{ matrix.service.name }}
          docker inspect mosip-${{ matrix.service.name }}:${{ needs.build-maven.outputs.version }}

  generate-build-summary:
    name: Generate Build Summary
    runs-on: ubuntu-latest
    needs: [build-maven, build-docker-local]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## 🚀 MOSIP ID Authentication Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.build-maven.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Images Built" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Image | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| authentication-service | \`mosip-authentication-service:${{ needs.build-maven.outputs.version }}\` | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| authentication-internal-service | \`mosip-authentication-internal-service:${{ needs.build-maven.outputs.version }}\` | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| authentication-otp-service | \`mosip-authentication-otp-service:${{ needs.build-maven.outputs.version }}\` | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Images are built locally in the runner" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure AWS credentials to push to ECR" >> $GITHUB_STEP_SUMMARY
          echo "3. Use the main build-and-push-ecr workflow for ECR deployment" >> $GITHUB_STEP_SUMMARY
